#!/bin/bash

# ==============================================================================
# PWNENV - Gestionnaire d'environnement et de projets de Pwn
# ==============================================================================

# --- Configuration Globale ---
CHALLENGES_DIR=~/challenges;
VENV_DIR="$CHALLENGES_DIR/.pwnenv";
TOOLS_DIR="$VENV_DIR/tools";
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)";
INIT_SCRIPT_PATH="$TOOLS_DIR/init_challenge.py"
API_SCRIPT_PATH="$TOOLS_DIR/pwnlib_api.py"

# --- Gestion des couleurs ---
GREEN='\033[0;32m';
YELLOW='\033[1;33m';
RED='\033[0;31m';
CYAN='\033[0;36m';
BOLD='\033[1m';
NC='\033[0m';

PWNENV_VERSION="3.1.3";

function show_help {
    echo -e "${BOLD}${GREEN}PwnEnv - v${PWNENV_VERSION} - Just make Pwn${NC}"
    echo "Usage: pwnenv <commande> [arguments]"
    echo -e "\n  ${CYAN}init${NC} <nom_projet> [source] [options_ssh]   Initialise un challenge."
    echo -e "  ${CYAN}go${NC}   <nom_projet>                          Se déplace dans un projet et active l'environnement."
    echo -e "\n${BOLD}SOURCES POUR 'init' :${NC}"
    echo -e "  ${YELLOW}--local${NC} /chemin/binaire      Utilise un binaire local."
    echo -e "  ${YELLOW}--ssh${NC} user@host:/path/bin   Télécharge un binaire via SCP."
    echo -e "  (aucune source)                 Crée un projet vide."
    echo -e "\n${BOLD}OPTIONS SSH POUR 'init' (sauvegardées pour l'exploit) :${NC}"
    echo -e "  ${YELLOW}--ssh-host${NC} <host>             Nom d'hôte pour l'exécution distante."
    echo -e "  ${YELLOW}--ssh-user${NC} <user>             Utilisateur pour l'exécution distante."
    echo -e "  ${YELLOW}--ssh-port${NC} <port>             Port SSH."
    echo -e "  ${YELLOW}--ssh-password${NC} <mdp>          Mot de passe SSH."
}

# Crée l'environnement et déploie les scripts la première fois
function self_setup {
    if [ -d "$VENV_DIR" ]; then
        return 0 # Déjà configuré
    fi

    echo -e "${YELLOW}Première utilisation. Configuration de l'environnement global...${NC}"
    sleep 0.5
    mkdir -p "$TOOLS_DIR"

    # Copie obligatoire depuis tools/ (ou PWNENV_TOOLS_PATH) sans fallback
    PWNENV_TOOLS_PATH_DEFAULT="$SCRIPT_DIR/tools"
    PWNENV_TOOLS_PATH="${PWNENV_TOOLS_PATH:-$PWNENV_TOOLS_PATH_DEFAULT}"
    if [ ! -f "$PWNENV_TOOLS_PATH/pwnlib_api.py" ] || [ ! -f "$PWNENV_TOOLS_PATH/init_challenge.py" ]; then
        echo -e "${RED}Erreur: Scripts introuvables dans '$PWNENV_TOOLS_PATH'.${NC}"
        exit 1
    fi
    cp "$PWNENV_TOOLS_PATH/pwnlib_api.py" "$API_SCRIPT_PATH"
    cp "$PWNENV_TOOLS_PATH/init_challenge.py" "$INIT_SCRIPT_PATH"

    echo -e "${YELLOW}Création de l'environnement virtuel global...${NC}"
    sleep 0.1
    python3 -m venv "$VENV_DIR"
    echo -e "${YELLOW}Installation de Pwntools...${NC}"
    sleep 0.7
    "$VENV_DIR/bin/pip" install -q pwntools > /dev/null 2>&1
    echo -e "${GREEN}Environnement PwnEnv prêt !${NC}"
    sleep 0.5
}

# ==============================================================================
# LOGIQUE PRINCIPALE
# ==============================================================================
mkdir -p "$CHALLENGES_DIR"
COMMAND=$1; shift
self_setup
source "$VENV_DIR/bin/activate"
export PYTHONPATH="$PYTHONPATH:$TOOLS_DIR"

case $COMMAND in
    init)
        echo -e "${BOLD}${GREEN}PwnEnv - v${PWNENV_VERSION} - Just make Pwn${NC}"
        PROJECT_NAME=$1
        if [ -z "$PROJECT_NAME" ]; then echo -e "${RED}Erreur: 'init' requiert un nom de projet.${NC}"; show_help; exit 1; fi
        PROJECT_PATH="$CHALLENGES_DIR/$PROJECT_NAME"
        shift
        
        # Analyse avancée des arguments
        declare -A a_args # Associative array
        while (( "$#" )); do
            case "$1" in
                --local|--ssh|--ssh-host|--ssh-user|--ssh-port|--ssh-password)
                    a_args[$1]="$2"; shift 2;;
                *) echo -e "${RED}Option inconnue: $1${NC}"; show_help; exit 1;;
            esac
        done
        
        echo -e "${CYAN}Initialisation du challenge '$PROJECT_NAME'...${NC}"
        
        CMD_ARGS=("$PROJECT_PATH")
        TEMP_BINARY_PATH=$(mktemp)
        
        if [[ -v a_args[--local] ]]; then
            echo "Source: Binaire local (${a_args[--local]})"
            cp "${a_args[--local]}" "$TEMP_BINARY_PATH"
            CMD_ARGS+=("--binary-path" "$TEMP_BINARY_PATH")
        elif [[ -v a_args[--ssh] ]]; then
            echo "Source: SSH (${a_args[--ssh]})"
            SCP_CMD="scp"
            if [[ -v a_args[--ssh-port] ]]; then SCP_CMD+=" -P ${a_args[--ssh-port]}"; fi
            if [[ -v a_args[--ssh-password] ]]; then
                if ! command -v sshpass &> /dev/null; then echo -e "${RED}Erreur: 'sshpass' requis.${NC}"; exit 1; fi
                SCP_CMD="sshpass -p '${a_args[--ssh-password]}' $SCP_CMD"
            fi
            eval "$SCP_CMD '${a_args[--ssh]}' '$TEMP_BINARY_PATH'"
            if [ $? -ne 0 ]; then echo -e "${RED}Échec du SCP.${NC}"; rm "$TEMP_BINARY_PATH"; exit 1; fi
            CMD_ARGS+=("--binary-path" "$TEMP_BINARY_PATH")
            # Le chemin distant du binaire est l'argument de --ssh
            a_args[--ssh-remote-path]="${a_args[--ssh]#*:}"
        fi

        # Passer les arguments SSH au script python
        for key in "${!a_args[@]}"; do
            CMD_ARGS+=("$key" "${a_args[$key]}")
        done

        python3 "$INIT_SCRIPT_PATH" "${CMD_ARGS[@]}"
        rm -f "$TEMP_BINARY_PATH"
        
        if [ $? -ne 0 ]; then echo -e "${RED}L'initialisation a échoué.${NC}"; exit 1; fi

        echo -e "\n${GREEN}Projet initialisé. Activation de l'environnement...${NC}"
        cd "$PROJECT_PATH"
        exec "$SHELL"
        ;;
    go)
        echo -e "${BOLD}${GREEN}PwnEnv - v${PWNENV_VERSION} - Just make Pwn${NC}"
        PROJECT_NAME=$1
        if [ -z "$PROJECT_NAME" ]; then echo -e "${RED}Erreur: 'go' requiert un nom de projet.${NC}"; show_help; exit 1; fi
        PROJECT_PATH="$CHALLENGES_DIR/$PROJECT_NAME"
        if [ ! -d "$PROJECT_PATH" ]; then echo -e "${RED}Erreur: Le projet '$PROJECT_NAME' n'existe pas.${NC}"; exit 1; fi
        cd "$PROJECT_PATH"
        echo -e "${GREEN}Déplacement vers '$PROJECT_NAME'... (environnement déjà actif)${NC}"
        exec "$SHELL"
        ;;

    *)
        show_help; exit 1;
        ;;
esac